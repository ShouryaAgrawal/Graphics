{
  "id": 5753,
  "name": "New Composed Shader",
  "fragment": "#define iterations 17\n#define volsteps 3\n#define sparsity 0.5\n#define stepsize 0.2\n#define frequencyVariation 1.3\n#define PI 3.141592653589793238462643383279\n\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform vec3 color;\nuniform float time;\nuniform float twinkleSpeed;\nuniform float speed;\nuniform float brightness;\nuniform float distfading;\nvarying vec2 Fork_of_Universe_Nursery1648025725233_168_vUv;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 Star_Field1648025760013_214_vUv;\nfloat Rand(vec2 co) \n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            float a = 1552.9898;\n                                                                                                                                                                                                                                            float b = 78.233;\n                                                                                                                                                                                                                                            float c = 43758.5453;\n                                                                                                                                                                                                                                            float dt = dot(co.xy, vec2(a, b));\n                                                                                                                                                                                                                                            float sn = mod(dt, 3.14);\n                                                                                                                                                                                                                                            return fract(sin(sn) * c);\n                                                                                                                                                                                                                                        }\nfloat iAspectRatio = 2.0;\nfloat Noise(vec2 UV, float Seed, vec2 Frequency) \n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            vec2 PerlinR = vec2(UV.x, UV.y) * vec2(Frequency);\n                                                                                                                                                                                                                                            vec2 Perlin1Pos = vec2(floor(PerlinR.x), floor(PerlinR.y));\n                                                                                                                                                                                                                                            float RandX0 = (Perlin1Pos.x + (Perlin1Pos.y) * Seed);\n                                                                                                                                                                                                                                            float RandX1 = ((Perlin1Pos.x + 1.0) + (Perlin1Pos.y) * Seed);\n                                                                                                                                                                                                                                            float RandX2 = (Perlin1Pos.x + (Perlin1Pos.y + 1.0) * Seed);\n                                                                                                                                                                                                                                            float RandX3 = ((Perlin1Pos.x + 1.0) + (Perlin1Pos.y + 1.0) * Seed);\n                                                                                                                                                                                                                                            float Perlin0Val = Rand(vec2(RandX0, RandX0 * 0.1224));\n                                                                                                                                                                                                                                            float Perlin1Val = Rand(vec2(RandX1, RandX1 * 0.1224));\n                                                                                                                                                                                                                                            float Perlin2Val = Rand(vec2(RandX2, RandX2 * 0.1224));\n                                                                                                                                                                                                                                            float Perlin3Val = Rand(vec2(RandX3, RandX3 * 0.1224));\n                                                                                                                                                                                                                                            vec2 Perc = (sin(((PerlinR - Perlin1Pos) * vec2(3.1415926)) - vec2(1.570796)) * vec2(0.5)) + vec2(0.5);\n                                                                                                                                                                                                                                            float Val0to2 = (Perlin0Val * (1.0 - Perc.y)) + (Perlin2Val * Perc.y);\n                                                                                                                                                                                                                                            float Val1to3 = (Perlin1Val * (1.0 - Perc.y)) + (Perlin3Val * Perc.y);\n                                                                                                                                                                                                                                            return (Val0to2 * (1.0 - Perc.x)) + (Val1to3 * Perc.x);\n                                                                                                                                                                                                                                        }\nfloat PerlinNoise1(vec2 UV, float Seed) \n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            float RetVal = 0.0;\n                                                                                                                                                                                                                                            RetVal += Noise(UV, Seed * 1.2, vec2(2.0)) * 0.5;\n                                                                                                                                                                                                                                            RetVal += Noise(UV, Seed * 1.4, vec2(5.0)) * 0.25;\n                                                                                                                                                                                                                                            RetVal += Noise(UV, Seed * 1.1, vec2(10.0)) * 0.125;\n                                                                                                                                                                                                                                            RetVal += Noise(UV, Seed * 1.5, vec2(24.0)) * 0.0625;\n                                                                                                                                                                                                                                            RetVal += Noise(UV, Seed * 1.2, vec2(54.0)) * 0.03125;\n                                                                                                                                                                                                                                            RetVal += Noise(UV, Seed * 1.3, vec2(128.0)) * 0.025625;\n                                                                                                                                                                                                                                            return RetVal;\n                                                                                                                                                                                                                                        }\nfloat PerlinNoise2(vec2 UV, float Seed) \n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            float RetVal = 0.0;\n                                                                                                                                                                                                                                            RetVal += Noise(UV, Seed * 1.2, vec2(6.0)) * 0.5;\n                                                                                                                                                                                                                                            RetVal += Noise(UV, Seed * 1.4, vec2(12.0)) * 0.25;\n                                                                                                                                                                                                                                            RetVal += Noise(UV, Seed * 1.1, vec2(24.0)) * 0.125;\n                                                                                                                                                                                                                                            RetVal += Noise(UV, Seed * 1.5, vec2(40.0)) * 0.0625;\n                                                                                                                                                                                                                                            RetVal += Noise(UV, Seed * 1.2, vec2(80.0)) * 0.03125;\n                                                                                                                                                                                                                                            RetVal += Noise(UV, Seed * 1.3, vec2(158.0)) * 0.025625;\n                                                                                                                                                                                                                                            return RetVal;\n                                                                                                                                                                                                                                        }\nvec4 Fork_of_Universe_Nursery1648025725233_168_main(void) \n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            vec4 Fork_of_Universe_Nursery1648025725233_168_gl_FragColor = vec4(0.0);\n                                                                                                                                                                                                                                            vec2 uv = Fork_of_Universe_Nursery1648025725233_168_vUv.xy + 0.5;\n                                                                                                                                                                                                                                            uv.x += time * speed * 0.1;\n                                                                                                                                                                                                                                            vec3 dir = vec3(uv * 2.0, 1.0);\n                                                                                                                                                                                                                                            float s = 0.1, fade = 0.01;\n                                                                                                                                                                                                                                            vec3 starColor = vec3(0.0);\n                                                                                                                                                                                                                                            for (int r = 0;\n r < volsteps; ++r) \n                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                vec3 p = (time * speed * twinkleSpeed) + dir * (s * 0.5);\n                                                                                                                                                                                                                                                p = abs(vec3(frequencyVariation) - mod(p, vec3(frequencyVariation * 2.0)));\n                                                                                                                                                                                                                                                float prevlen = 0.0, a = 0.0;\n                                                                                                                                                                                                                                                for (int i = 0;\n i < iterations; ++i) \n                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                    p = abs(p);\n                                                                                                                                                                                                                                                    p = p * (1.0 / dot(p, p)) + (-sparsity);\n                                                                                                                                                                                                                                                    float len = length(p);\n                                                                                                                                                                                                                                                    a += abs(len - prevlen);\n                                                                                                                                                                                                                                                    prevlen = len;\n                                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                                a *= a * a;\n                                                                                                                                                                                                                                                starColor += (vec3(s, s * s, s * s * s) * a * brightness + 1.0) * fade;\n                                                                                                                                                                                                                                                fade *= distfading;\n                                                                                                                                                                                                                                                s += stepsize;\n                                                                                                                                                                                                                                            }\n                                                                                                                                                                                                                                            starColor = min(starColor, vec3(1.2));\n                                                                                                                                                                                                                                            float intensity = min(starColor.r + starColor.g + starColor.b, 0.7);\n                                                                                                                                                                                                                                            vec2 sgn = vec2(Fork_of_Universe_Nursery1648025725233_168_vUv.xy) * 2.0 - 1.0;\n                                                                                                                                                                                                                                            vec2 gradient = vec2(dFdx(intensity) * sgn.x, dFdy(intensity) * sgn.y);\n                                                                                                                                                                                                                                            float cutoff = max(max(gradient.x, gradient.y) - 0.1, 0.0);\n                                                                                                                                                                                                                                            starColor *= max(1.0 - cutoff * 6.0, 0.3);\n                                                                                                                                                                                                                                            Fork_of_Universe_Nursery1648025725233_168_gl_FragColor = vec4(starColor * color, 1.0);\n                                                                                                                                                                                                                                            return Fork_of_Universe_Nursery1648025725233_168_gl_FragColor *= 1.0;\n                                                                                                                                                                                                                                        }\nvec4 Star_Field1648025760013_214_main() \n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            vec4 Star_Field1648025760013_214_gl_FragColor = vec4(0.0);\n                                                                                                                                                                                                                                            vec2 UV = Star_Field1648025760013_214_vUv;\n                                                                                                                                                                                                                                            vec2 TimeOffset = vec2(sin(time * 0.00962379), cos(time * 0.00962379)) * vec2(sin(time * 0.0041839) + 0.3);\n                                                                                                                                                                                                                                            vec2 TempVec2A = TimeOffset;\n                                                                                                                                                                                                                                            vec2 TempVec2B = vec2(0.0);\n                                                                                                                                                                                                                                            vec2 TempVec2C = vec2(0.0);\n                                                                                                                                                                                                                                            vec3 TempVec3A = vec3(0.0);\n                                                                                                                                                                                                                                            TempVec2C.x = pow(1.0 - PerlinNoise1(UV + TempVec2A, 21.32143), 3.5);\n                                                                                                                                                                                                                                            TempVec3A = vec3(TempVec2C.x) * vec3(0.25, 0.67, 0.5);\n                                                                                                                                                                                                                                            TempVec2C.x = pow(((1.0 - PerlinNoise2(UV + (TempVec2A * vec2(1.15)), 12.523)) * TempVec2C.x), 1.1);\n                                                                                                                                                                                                                                            TempVec3A += vec3(TempVec2C.x) * vec3(1.0, 0.0, 0.0);\n                                                                                                                                                                                                                                            vec4 RetVal = vec4(0, 0, 0, 1);\n                                                                                                                                                                                                                                            TempVec2C.x = Rand(vec2(UV.x, UV.y));\n                                                                                                                                                                                                                                            TempVec2C.y = Rand(vec2(UV.y, UV.x));\n                                                                                                                                                                                                                                            float PowIn = ((sin(((time + 10.0) * TempVec2C.x * 1.7)) * 0.5) + 0.5);\n                                                                                                                                                                                                                                            RetVal.xyz = max(vec3(TempVec2C.x * pow(TempVec2C.y, 10.0) * pow(PowIn, 2.0) * 1.0), vec3(0.0));\n                                                                                                                                                                                                                                            RetVal.xyz += TempVec3A;\n                                                                                                                                                                                                                                            Star_Field1648025760013_214_gl_FragColor = RetVal;\n                                                                                                                                                                                                                                            return Star_Field1648025760013_214_gl_FragColor *= 1.0;\n                                                                                                                                                                                                                                        }\nvoid main() \n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            gl_FragColor = (Fork_of_Universe_Nursery1648025725233_168_main() + Star_Field1648025760013_214_main());                                                                                                                                                                                                                                        }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec2 Fork_of_Universe_Nursery1648025725233_168_vUv;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 Star_Field1648025760013_214_vUv;\nvec4 Fork_of_Universe_Nursery1648025725233_168_main() \n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            vec4 Fork_of_Universe_Nursery1648025725233_168_gl_Position = vec4(0.0);\n                                                                                                                                                                                                                                            Fork_of_Universe_Nursery1648025725233_168_vUv = uv;\n                                                                                                                                                                                                                                            vPosition = position;\n                                                                                                                                                                                                                                            vNormal = normal;\n                                                                                                                                                                                                                                            Fork_of_Universe_Nursery1648025725233_168_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                                                                                                                                                                            return Fork_of_Universe_Nursery1648025725233_168_gl_Position *= 1.0;\n                                                                                                                                                                                                                                        }\nvec4 Star_Field1648025760013_214_main() \n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            vec4 Star_Field1648025760013_214_gl_Position = vec4(0.0);\n                                                                                                                                                                                                                                            Star_Field1648025760013_214_vUv = uv;\n                                                                                                                                                                                                                                            Star_Field1648025760013_214_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                                                                                                                                                                            return Star_Field1648025760013_214_gl_Position *= 1.0;\n                                                                                                                                                                                                                                        }\nvoid main() \n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            gl_Position = Fork_of_Universe_Nursery1648025725233_168_main() + Star_Field1648025760013_214_main();                                                                                                                                                                                                                                        }\n",
  "uniforms": {
    "color": {
      "value": {
        "r": 0.6392156862745098,
        "g": 0.058823529411764705,
        "b": 0.20392156862745098
      },
      "type": "c",
      "glslType": "vec3"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "speed": {
      "value": "0.000005",
      "type": "f",
      "glslType": "float"
    },
    "brightness": {
      "value": "0.001",
      "type": "f",
      "glslType": "float"
    },
    "distfading": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "twinkleSpeed": {
      "value": "64",
      "type": "f",
      "glslType": "float"
    }
  },
  "url": "http://shaderfrog.com/app/view/5753",
  "user": {
    "username": "jake0072600",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}